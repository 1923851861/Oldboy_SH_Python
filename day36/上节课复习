上节课复习：
    1、GIL全局解释器锁
        什么是？
            GIL本质就是一个把互斥锁，是将多个并发的线程对共享数据的修改
            变成“串行”

        为何有？
           Cpython解释器的垃圾回收机制不是线程安全的


        如何用？
            有GIL的存在，导致同一个进程内的多个线程同一时刻只能有一个运行
            即同一进程的多个线程无法实现并行=》无法利用多核优势
            但是可以实现并发的效果

        什么是多核优势？
            多核即多个cpu，多个cpu带来的优势是计算性能的提升，所以

            IO密集型：
                多线程
            计算密集型
                多进程

        GIL vs 自定义互斥锁
            GIL相当于执行权限，意思是在一个进程内的多个线程想要执行，必须
            先抢GIL，这把锁的特点是，当一个线程被剥夺走cpu的执行权限的同时会被
            解释器强行释放GIL

    2、进程池与线程池
        什么是？
            池：池用来限制进程/线程个数的一种机制
        为何用？
            当并发的任务数远大于计算机的承受能力，应该用池的概念
            将并发的进程数/线程数控制在计算机能承受的数目

        如何用？
            from concurrent.futures import ThreadPoolExecutor,ProcessPoolExecutor
            def task(n):
                return n**2
            def func(future):
                print(future.result())

            if __name__ == '__main__':
                p=ProcessPoolExecutor(4)
                p.submit(task,10).add_done_callback(func)

                p.shutdown(wait=True)
                # pool.close()
                # pool.join()
                print('主')

        提交任务的两种方式：
            1、同步：提交完任务后就在原地等待，直到任务运行完毕并且拿到返回值后，才运行下一行代码
            2、异步：提交完任务（绑定一个回调函数）后不原地等待，直接运行下一行代码，等到任务运行有返回值自动触发回调的函数的运行

        程序的运行状态（阻塞，非阻塞）
            1、阻塞：
                IO阻塞
            2、非阻塞：
                运行
                就绪

今日内容：
    1、协程
    2、IO模型
        阻塞IO
        非阻塞IO
        IO多路复用
        异步IO

